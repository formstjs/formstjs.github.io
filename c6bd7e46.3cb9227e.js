(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),d=r,u=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return n?a.a.createElement(u,c(c({ref:t},s),{},{components:n})):a.a.createElement(u,c({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),o=(n(0),n(105)),i={id:"gettingStarted",title:"Getting Started",sidebar_label:"Getting Started",slug:"/"},c={unversionedId:"gettingStarted",id:"gettingStarted",isDocsHomePage:!1,title:"Getting Started",description:"Introduction",source:"@site/docs/gettingStarted.md",slug:"/",permalink:"/docs/",editUrl:"https://github.com/formstjs/formst-docs/docs/gettingStarted.md",version:"current",sidebar_label:"Getting Started",sidebar:"someSidebar",next:{title:"Validation",permalink:"/docs/validation"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[{value:"Basic Usage",id:"basic-usage",children:[]}]}],s={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Formst")," is the new way to create and handle forms. Unlike famous libraries like Formik that are UI-first, Formst is data first. It is based on ",Object(o.b)("strong",{parentName:"li"},Object(o.b)("em",{parentName:"strong"},"MST")),"(MobX-State-Tree). This library helps you create high-performance forms with interdependent fields within tables and add validations.")),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"Use ",Object(o.b)("strong",{parentName:"p"},"yarn")," or ",Object(o.b)("strong",{parentName:"p"},"npm")," to install this library:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"# yarn\nyarn add formst\n\n# npm\nnpm add formst\n")),Object(o.b)("h3",{id:"basic-usage"},"Basic Usage"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create a form model:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const TodoForm = createFormModel(\n  'TodoForm',\n\n  {\n    title: types.string,\n\n    description: types.string,\n  },\n\n  {\n    validation: {\n      title: ['required'],\n\n      description: 'required',\n    },\n  },\n).actions((self) => ({\n  onSubmit: () => {\n    setTimeout(() => {\n      alert(JSON.stringify(getSnapshot(self), null, 2));\n    }, 100);\n  },\n}));\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Create an instance of the model:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"const todoForm = TodoForm.create({\n  title: '',\n  description: '',\n});\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Wrap the components inside ",Object(o.b)("strong",{parentName:"p"},"Formst")," and use ",Object(o.b)("em",{parentName:"p"},"Field")," API to render the fields:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'<Formst formInstance={todoForm}>\n  <form onSubmit={todoForm.handleSubmit}>\n    <Field name="title" />\n    <ErrorMessage name="title" />\n\n    <br />\n\n    <Field name="description" />\n    <ErrorMessage name="description" />\n\n    <button type="submit">Submit</button>\n  </form>\n</Formst>\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Optional: If you don't like ",Object(o.b)("inlineCode",{parentName:"p"},"Field")," API, you can directly plug this to an element."),Object(o.b)("p",{parentName:"li"},"Note: For this to work, you need to wrap the entire component inside observer."),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'export default observer(() => {\n  return (\n    <Formst formInstance={todoForm}>\n      <form onSubmit={todoForm.handleSubmit}>\n        <input\n          name="title"\n          value={todoForm.title}\n          onChange={todoForm.handleChange}\n          onBlur={todoForm.handleBlur}></input>\n        <ErrorMessage name="title" />\n\n        <br />\n\n        <Field name="description" />\n        <ErrorMessage name="description" />\n\n        <button type="submit">Submit</button>\n      </form>\n    </Formst>\n  );\n});\n')))))}b.isMDXComponent=!0}}]);